#!/usr/bin/env node
import{createRequire as $}from"node:module";var Y=$(import.meta.url);import{argv as j,exit as L}from"node:process";function q(i,I){let o=i.slice(0,I).split(/\r\n|\n|\r/g);return[o.length,o.pop().length+1]}function Q(i,I,o){let R=i.split(/\r\n|\n|\r/g),O="",n=(Math.log10(I+1)|0)+1;for(let E=I-1;E<=I+1;E++){let T=R[E-1];if(!T)continue;if(O+=E.toString().padEnd(n," "),O+=":  ",O+=T,O+="\n",E===I)O+=" ".repeat(n+o+2),O+="^\n"}return O}/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */class N extends Error{line;column;codeblock;constructor(i,I){const[o,R]=q(I.toml,I.ptr),O=Q(I.toml,o,R);super(`Invalid TOML document: ${i}\n\n${O}`,I);this.line=o,this.column=R,this.codeblock=O}}function x(i,I){let o=0;while(i[I-++o]==="\\");return--o&&o%2}function h(i,I=0,o=i.length){let R=i.indexOf("\n",I);if(i[R-1]==="\r")R--;return R<=o?R:-1}function D(i,I){for(let o=I;o<i.length;o++){let R=i[o];if(R==="\n")return o;if(R==="\r"&&i[o+1]==="\n")return o+1;if(R<" "&&R!=="\t"||R==="\x7F")throw new N("control characters are not allowed in comments",{toml:i,ptr:I})}return i.length}function f(i,I,o,R){let O;while((O=i[I])===" "||O==="\t"||!o&&(O==="\n"||O==="\r"&&i[I+1]==="\n"))I++;return R||O!=="#"?I:f(i,D(i,I),o)}function w(i,I,o,R,O=!1){if(!R)return I=h(i,I),I<0?i.length:I;for(let n=I;n<i.length;n++){let E=i[n];if(E==="#")n=h(i,n);else if(E===o)return n+1;else if(E===R||O&&(E==="\n"||E==="\r"&&i[n+1]==="\n"))return n}throw new N("cannot find end of structure",{toml:i,ptr:I})}function U(i,I){let o=i[I],R=o===i[I+1]&&i[I+1]===i[I+2]?i.slice(I,I+3):o;I+=R.length-1;do I=i.indexOf(R,++I);while(I>-1&&o!=="'"&&x(i,I));if(I>-1){if(I+=R.length,R.length>1){if(i[I]===o)I++;if(i[I]===o)I++}}return I}/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *//*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */var z=/^(\d{4}-\d{2}-\d{2})?[T ]?(?:(\d{2}):\d{2}:\d{2}(?:\.\d+)?)?(Z|[-+]\d{2}:\d{2})?$/i;class u extends Date{#I=!1;#E=!1;#i=null;constructor(i){let I=!0,o=!0,R="Z";if(typeof i==="string"){let O=i.match(z);if(O){if(!O[1])I=!1,i=`0000-01-01T${i}`;if(o=!!O[2],o&&i[10]===" "&&(i=i.replace(" ","T")),O[2]&&+O[2]>23)i="";else if(R=O[3]||null,i=i.toUpperCase(),!R&&o)i+="Z"}else i=""}super(i);if(!isNaN(this.getTime()))this.#I=I,this.#E=o,this.#i=R}isDateTime(){return this.#I&&this.#E}isLocal(){return!this.#I||!this.#E||!this.#i}isDate(){return this.#I&&!this.#E}isTime(){return this.#E&&!this.#I}isValid(){return this.#I||this.#E}toISOString(){let i=super.toISOString();if(this.isDate())return i.slice(0,10);if(this.isTime())return i.slice(11,23);if(this.#i===null)return i.slice(0,-1);if(this.#i==="Z")return i;let I=+this.#i.slice(1,3)*60+ +this.#i.slice(4,6);return I=this.#i[0]==="-"?I:-I,new Date(this.getTime()-I*60000).toISOString().slice(0,-1)+this.#i}static wrapAsOffsetDateTime(i,I="Z"){let o=new u(i);return o.#i=I,o}static wrapAsLocalDateTime(i){let I=new u(i);return I.#i=null,I}static wrapAsLocalDate(i){let I=new u(i);return I.#E=!1,I.#i=null,I}static wrapAsLocalTime(i){let I=new u(i);return I.#I=!1,I.#i=null,I}}function H(i,I=0,o=i.length){let R=i[I]==="\'",O=i[I++]===i[I]&&i[I]===i[I+1];if(O){if(o-=2,i[I+=2]==="\r")I++;if(i[I]==="\n")I++}let n=0,E,T="",A=I;while(I<o-1){let S=i[I++];if(S==="\n"||S==="\r"&&i[I]==="\n"){if(!O)throw new N("newlines are not allowed in strings",{toml:i,ptr:I-1})}else if(S<" "&&S!=="\t"||S==="\x7F")throw new N("control characters are not allowed in strings",{toml:i,ptr:I-1});if(E){if(E=!1,S==="u"||S==="U"){let e=i.slice(I,I+=S==="u"?4:8);if(!Z.test(e))throw new N("invalid unicode escape",{toml:i,ptr:n});try{T+=String.fromCodePoint(parseInt(e,16))}catch{throw new N("invalid unicode escape",{toml:i,ptr:n})}}else if(O&&(S==="\n"||S===" "||S==="\t"||S==="\r")){if(I=f(i,I-1,!0),i[I]!=="\n"&&i[I]!=="\r")throw new N("invalid escape: only line-ending whitespace may be escaped",{toml:i,ptr:n});I=f(i,I)}else if(S in g)T+=g[S];else throw new N("unrecognized escape sequence",{toml:i,ptr:n});A=I}else if(!R&&S==="\\")n=I-1,E=!0,T+=i.slice(A,n)}return T+i.slice(A,o-1)}function G(i,I,o,R){if(i==="true")return!0;if(i==="false")return!1;if(i==="-inf")return-1/0;if(i==="inf"||i==="+inf")return 1/0;if(i==="nan"||i==="+nan"||i==="-nan")return NaN;if(i==="-0")return R?0n:0;let O=m.test(i);if(O||K.test(i)){if(J.test(i))throw new N("leading zeroes are not allowed",{toml:I,ptr:o});i=i.replace(/_/g,"");let E=+i;if(isNaN(E))throw new N("invalid number",{toml:I,ptr:o});if(O){if((O=!Number.isSafeInteger(E))&&!R)throw new N("integer value cannot be represented losslessly",{toml:I,ptr:o});if(O||R===!0)E=BigInt(i)}return E}const n=new u(i);if(!n.isValid())throw new N("invalid value",{toml:I,ptr:o});return n}/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */var m=/^((0x[0-9a-fA-F](_?[0-9a-fA-F])*)|(([+-]|0[ob])?\d(_?\d)*))$/,K=/^[+-]?\d(_?\d)*(\.\d(_?\d)*)?([eE][+-]?\d(_?\d)*)?$/,J=/^[+-]?0[0-9_]/,Z=/^[0-9a-f]{4,8}$/i,g={b:"\b",t:"\t",n:"\n",f:"\f",r:"\r",'"':'"',"\\":"\\"};function _(i,I,o,R){let O=i.slice(I,o),n=O.indexOf("#");if(n>-1)D(i,n),O=O.slice(0,n);let E=O.trimEnd();if(!R){let T=O.indexOf("\n",E.length);if(T>-1)throw new N("newlines are not allowed in inline tables",{toml:i,ptr:I+T})}return[E,n]}function c(i,I,o,R,O){if(R===0)throw new N("document contains excessively nested structures. aborting.",{toml:i,ptr:I});let n=i[I];if(n==="["||n==="{"){let[A,S]=n==="["?W(i,I,R,O):M(i,I,R,O),e=o?w(i,S,",",o):S;if(S-e&&o==="}"){let C=h(i,S,e);if(C>-1)throw new N("newlines are not allowed in inline tables",{toml:i,ptr:C})}return[A,e]}let E;if(n==='"'||n==="'"){E=U(i,I);let A=H(i,I,E);if(o){if(E=f(i,E,o!=="]"),i[E]&&i[E]!==","&&i[E]!==o&&i[E]!=="\n"&&i[E]!=="\r")throw new N("unexpected character encountered",{toml:i,ptr:E});E+=+(i[E]===",")}return[A,E]}E=w(i,I,",",o);let T=_(i,I,E-+(i[E-1]===","),o==="]");if(!T[0])throw new N("incomplete key-value declaration: no value specified",{toml:i,ptr:I});if(o&&T[1]>-1)E=f(i,I+T[1]),E+=+(i[E]===",");return[G(T[0],i,I,O),E]}/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */function b(i,I,o="="){let R=I-1,O=[],n=i.indexOf(o,I);if(n<0)throw new N("incomplete key-value: cannot find end of key",{toml:i,ptr:I});do{let E=i[I=++R];if(E!==" "&&E!=="\t")if(E==='"'||E==="\'"){if(E===i[I+1]&&E===i[I+2])throw new N("multiline strings are not allowed in keys",{toml:i,ptr:I});let T=U(i,I);if(T<0)throw new N("unfinished string encountered",{toml:i,ptr:I});R=i.indexOf(".",T);let A=i.slice(T,R<0||R>n?n:R),S=h(A);if(S>-1)throw new N("newlines are not allowed in keys",{toml:i,ptr:I+R+S});if(A.trimStart())throw new N("found extra tokens after the string part",{toml:i,ptr:T});if(n<T){if(n=i.indexOf(o,T),n<0)throw new N("incomplete key-value: cannot find end of key",{toml:i,ptr:I})}O.push(H(i,I,T))}else{R=i.indexOf(".",I);let T=i.slice(I,R<0||R>n?n:R);if(!a.test(T))throw new N("only letter, numbers, dashes and underscores are allowed in keys",{toml:i,ptr:I});O.push(T.trimEnd())}}while(R+1&&R<n);return[O,f(i,n+1,!0,!0)]}function M(i,I,o,R){let O={},n=new Set,E,T=0;I++;while((E=i[I++])!=="}"&&E){let A={toml:i,ptr:I-1};if(E==="\n")throw new N("newlines are not allowed in inline tables",A);else if(E==="#")throw new N("inline tables cannot contain comments",A);else if(E===",")throw new N("expected key-value, found comma",A);else if(E!==" "&&E!=="\t"){let S,e=O,C=!1,[y,P]=b(i,I-1);for(let l=0;l<y.length;l++){if(l)e=C?e[S]:e[S]={};if(S=y[l],(C=Object.hasOwn(e,S))&&(typeof e[S]!=="object"||n.has(e[S])))throw new N("trying to redefine an already defined value",{toml:i,ptr:I});if(!C&&S==="__proto__")Object.defineProperty(e,S,{enumerable:!0,configurable:!0,writable:!0})}if(C)throw new N("trying to redefine an already defined value",{toml:i,ptr:I});let[B,X]=c(i,P,"}",o-1,R);n.add(B),e[S]=B,I=X,T=i[I-1]===","?I-1:0}}if(T)throw new N("trailing commas are not allowed in inline tables",{toml:i,ptr:T});if(!E)throw new N("unfinished table encountered",{toml:i,ptr:I});return[O,I]}function W(i,I,o,R){let O=[],n;I++;while((n=i[I++])!=="]"&&n)if(n===",")throw new N("expected value, found comma",{toml:i,ptr:I-1});else if(n==="#")I=D(i,I);else if(n!==" "&&n!=="\t"&&n!=="\n"&&n!=="\r"){let E=c(i,I-1,"]",o-1,R);O.push(E[0]),I=E[1]}if(!n)throw new N("unfinished array encountered",{toml:i,ptr:I});return[O,I]}/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */var a=/^[a-zA-Z0-9-_]+[ \t]*$/;function d(i,I,o,R){let O=I,n=o,E,T=!1,A;for(let S=0;S<i.length;S++){if(S){if(O=T?O[E]:O[E]={},n=(A=n[E]).c,R===0&&(A.t===1||A.t===2))return null;if(A.t===2){let e=O.length-1;O=O[e],n=n[e].c}}if(E=i[S],(T=Object.hasOwn(O,E))&&n[E]?.t===0&&n[E]?.d)return null;if(!T){if(E==="__proto__")Object.defineProperty(O,E,{enumerable:!0,configurable:!0,writable:!0}),Object.defineProperty(n,E,{enumerable:!0,configurable:!0,writable:!0});n[E]={t:S<i.length-1&&R===2?3:R,d:!1,i:0,c:{}}}}if(A=n[E],A.t!==R&&!(R===1&&A.t===3))return null;if(R===2){if(!A.d)A.d=!0,O[E]=[];O[E].push(O={}),A.c[A.i++]=A={t:1,d:!1,i:0,c:{}}}if(A.d)return null;if(A.d=!0,R===1)O=T?O[E]:O[E]={};else if(R===0&&T)return null;return[E,O,A.c]}function F(i,{maxDepth:I=1000,integersAsBigInt:o}={}){let R={},O={},n=R,E=O;for(let T=f(i,0);T<i.length;){if(i[T]==="["){let A=i[++T]==="[",S=b(i,T+=+A,"]");if(A){if(i[S[1]-1]!=="]")throw new N("expected end of table declaration",{toml:i,ptr:S[1]-1});S[1]++}let e=d(S[0],R,O,A?2:1);if(!e)throw new N("trying to redefine an already defined table or value",{toml:i,ptr:T});E=e[2],n=e[1],T=S[1]}else{let A=b(i,T),S=d(A[0],n,E,0);if(!S)throw new N("trying to redefine an already defined table or value",{toml:i,ptr:T});let e=c(i,A[1],void 0,I,o);S[1][S[0]]=e[0],T=e[1]}if(T=f(i,T,!0),i[T]&&i[T]!=="\n"&&i[T]!=="\r")throw new N("each key-value declaration must be followed by an end-of-line",{toml:i,ptr:T});T=f(i,T)}return R}/*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *//*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *//*!
 * Copyright (c) Squirrel Chat et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */function V(){console.log("hacksmith - integration assistant CLI\n"),console.log("Usage:"),console.log("  hacksmith init <provider> <usecase> [options]"),console.log("  hacksmith plan <provider> <usecase> [options]"),console.log("  hacksmith parse-toml <file> [options]"),console.log("  hacksmith --help\n")}async function k(){const i=j.slice(2),[I,o,...R]=i;if(!I||I==="--help"||I==="-h")V(),L(0);if(I==="init")console.log("init: placeholder - implement interactive onboarding"),L(0);if(I==="plan")console.log("plan: placeholder - emit structured plan JSON"),L(0);if(I==="parse-toml"){if(!o)console.error("Error: Please provide a TOML file path"),console.log("Usage: hacksmith parse-toml <file>"),L(1);try{const O=await import("node:fs/promises"),E=(await import("node:path")).resolve(o);await O.access(E);const T=await O.readFile(E,"utf-8"),A=F(T);if(R.includes("--json"))console.log(JSON.stringify(A,null,2));else console.log("\uD83D\uDCC4 TOML File:",E),console.log("\uD83D\uDD0D Parsed Content:"),console.dir(A,{depth:null,colors:!0});L(0)}catch(O){if(O.code==="ENOENT")console.error(`Error: File not found: ${o}`);else if(O.name==="SyntaxError")console.error(`Error: Invalid TOML syntax in ${o}`),console.error(O.message);else console.error(`Error: Failed to parse TOML file: ${O.message}`);L(1)}}if(I==="debug"){console.log("Toml Test starting");const O="./src/playground/example.blueprint.toml",E=await(await import("node:fs/promises")).readFile(O,"utf-8"),T=F(E);console.log(T),L(0)}console.log(`Unknown command: ${I}`),V(),L(1)}k();

//# debugId=BC431E540206FE2964756E2164756E21
//# sourceMappingURL=data:application/json;base64,
